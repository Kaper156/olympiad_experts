+DB: Change relationships (object must don't have a children field)
    use exclude fields in model_form()

+FRONT-END: Change design to normal, not this

+js:
    ajax_submit
    to flash
    dynamic change html

+FRONT-END: Change buttons in control panel
-FRONT-END: Change modal editor form (sticky)

+Models-forms: date format olympiad
    format is Day.Month.YEAR

+Flash()
    don't need, ajax get response like
        {'category': ['mes1', 'mes2'], 'etc': ['e1']}

+Jquery form-submit
    maybe work on all pages, maybe

-FRONT-END: Change id to modal with object types
-FRONT-END: SubLine of tables (aspect, etc) have in
                                        http://getbootstrap.com/javascript/#collapse

+DB: Add status field to olympiad
    too add model Status


+Rewrite flash_errors(form)
    +add function to flash-edit, del, add objects (in view)
    +Repr to models (or parent class with id, name (because many classes have this))
    +and use like flash_add(object) or flash_edit(object)

+Labels to form-editors in Ð¯ussian

+USE WTForms-Alchemy

-Init args to add_instance
-Macro for all models
-Static table fields (buttons)
-Data = dict(from_ajax) to init model

+URL like:
    /parent-id/children
    /parent-id/children/add
    /parent-id/child-id/check-value (balls)
    /child-id/edit
    /child-id/delete

-Add js function to validate field max_balls
    NO, just use numeric-up-down with min-max
        min = 1
        max =
    if no way- check balls after they get (in view)


-Olympiad change status to current max_balls of criteria

+Dynamic JS table edit
    Don't need now

-Additional: breadcrumbs to normal (classes and other)
-Additional: Flask-Migrate